# Setup for deployment
#
# Required env variables:
# MICROSERVICES_NETWORK_NAME - name of internal network of all microservices
# DOCKER_REGISTRY - URL of docker registry
# ACCESS_TOKEN_SECRET - secret for generating access tokens
# REFRESH_TOKEN_SECRET - secret for generating refresh tokens

services:
  auth-service:
    image: ${DOCKER_REGISTRY}/gpt-articles/api-service:latest
    container_name: gpt-articles-auth-service
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      DB_HOST: gpt-articles-auth-postgres
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: user_db
    restart: unless-stopped
    networks:
      - all-services-network
      - service-network
    depends_on:
      - db

  db:
    image: postgres:17-alpine
    container_name: gpt-articles-auth-postgres
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    restart: unless-stopped
    networks:
      - service-network
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data

networks:
  # Internal network for the service and its dependencies
  service-network:
    name: gpt-articles-auth-network
    driver: bridge
    internal: true
  # Internal network of all microservices
  all-services-network:
    name: ${MICROSERVICES_NETWORK_NAME}
    driver: bridge
    internal: true